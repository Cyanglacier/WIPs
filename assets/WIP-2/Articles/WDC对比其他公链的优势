可以写的点：
WDC是以混合共识为基础的，基于非图灵完备的规则验证式合约模型与JAVA语言的公有链
1、编程语言；2、共识机制；3、经济模型；4、智能合约模型；5、地址模型；6、挖矿/密码函数；7、交易模型；8、多签；9、治理；10、交易量。

（2020年，除了新冠肺炎肆虐全球带来的恐慌外，经济状况的急转直下也为所有人类带来了忧虑，人们纷纷对未来打上了一个问号；同样在12年前，同样是经济危机，次贷危机带来的金融泡沫急速破灭，不少人也纷纷对未来打上了问号）

自从中本聪于2009年1月正式发布比特币的代码以来，区块链技术的发展已经走过了十多个年头。
在这十年间，区块链技术先是从比特币所描绘的“点对点的电子现金系统”扩展到了“可编程资产的公共账本”，然后又进一步发展出了以以太坊为代表的可以执行图灵完备的运算并记录结果的「通用状态计算机」，以及以EOS为首的商业体系架构应用等等。接下来，谁又会引领下一个时代呢？是否出现一些核心协议及网络被主流采用并形成规范，继而出现一大批去中心化应用的建立和落地？还是各种协议体系、各种代币的“跨链融合”？亦或者是“智能去中心化监管”？答案尚且需要时间来揭示，但可以肯定的是，随着区块链技术基础架构的不断完善与发展，目前已经出现了相当数量的可以奠定区块链行业发展的底层项目。WDC智慧链也是其中一员。相信大家会对此抱有诸多的疑问，WDC是否能从众多明星公链中脱颖而出？
在解答疑问之前，我们简单介绍一下Wisedom Blockchain(以下简称“WDC”)。WDC致力于实现智能数据资产互联基础区块链生态系统，是一个实现生活设备物联，生活信息互联的一种全新的基于区块链技术的通信平台。旨在为人们众多的智能物品提供分布式的数据连接以及身份验证、数据资产交换等服务。智慧链作为底层的支撑系统，以社区自治的公链形式部署，最终支持多链并行的运行结构，支持多层通信协议，包含设备互联协议、终端数据共享协议以及身份验证协议和即时通信协议等。
既往十年，区块链社区建立在开源基础上，WDC同样如此，在各个开源前辈项目的基础上，WDC还做出了数十种创新，旨在从不同于已有区块链项目的角度，开拓开源治理社区与应用新征途。回到正题，WDC与目前主流的区块链项目的不同之处包括但不仅限于以下十点：

一、共识机制
共识机制决定了区块链链上治理程序、节点出块与网络稳定性的相关细节。目前，共识机制可以笼统的区分为两方阵营——以比特币、以太坊（ETH1.0）为代表的工作量证明PoW和以ETH 2.0、Vsystem等为代表的权益证明PoS，在此基础上，还有数种分支共识机制，例如将算力转化为储存空间的容量证明PoC与时空证明PoST、以节点竞选为超级节点并集体出块的授权股权证明DPos、混合工作量与权益证明的混合证明等等。（经过了数年发展，如今从业人员已不再争论何种共识更加“优秀”，相反，经过区块链技术的不断发展和现实应用的不断增多，从业人员已然明确——不存在完美的共识机制—）不同的共识机制对应不同的应用环境，上述共识各有优劣：
工作量证明将算力作为出块依据，谁能掌握尽可能多的算力，谁就能尽可能多的产出区块并获得奖励，同时矿工投入的算力成本成为了价值支撑，对于偏资产类型的区块链而言，工作量证明能判断当前网络的近似价值；但当某个个体算力超过50%后，如果利益大于成本，个体就存在通过重组区块发起双花攻击的可能，同时矿工出于利益角度将不可避免地集群化运行，加重网络的集权化，这将导致区块链信用遭受巨大挫折，甚至让用户不再信任该区块链。
权益证明将币权作为出块依据，谁能掌握尽可能多的代币并质押，谁就能获得尽可能多的区块奖励，权益证明中不存在传统意义上的矿工，更多的以“出块节点”代称，出块节点的配置要求显著低于工作量证明矿工之配置，不仅有效降低了出块门槛，还有效降低了运行区块链的能源消耗；然而由于区块生产不再需要投入算力与电力，拥有足够代币的节点甚至可以发起更大规模的区块重组——长程攻击，另一方面权益证明还存在无利害攻击等社会工程学上的问题。
考虑到工作量证明与权益证明各有优劣，不少项目开始将二者合二为一，采用混合证明以期取长补短。WDC即采用了混合证明，混合了传统的工作量证明与新兴的DPoS，用户可以通过质押WDC代币达到参与门槛，如果用户质押的代币量处于某一特定周期的前15名，那么该用户将作为出块节点，在达到基础出块配置要求的前提下，按照顺序生产相关区块并获得奖励。混合共识旨在取长补短——用工作量证明来避免DPoS等权益证明存在的安全性风险；用权益证明来避免网络算力的集中化并降低能源消耗。与其他DPoS相同，如果矿工没有在规定时间内完成出块任务，它不仅会被剔除出出块节点列表，还会因为失信行为被拉入黑名单中。当然，WDC不是第一个，也不是最后一个采用混合共识的项目，诸如Decred，甚至BHD等采用容量证明的项目，都或多或少在工作量证明的基础上继承了权益证明，殊途同归，虽然他们采取了不同于WDC的方式，但最终目的都是一样的，为了达到“取长补短”。

二、程序语言
程序语言是计算机同人类、机器同机器交互的介质。目前已有相当多的程序语言可供使用，各个语言亦有自己擅长的领域和相应的缺点，考虑到讨论“谁是最优秀的程序语言”往往会引起程序员之间的争论，所以我们无意探讨此问题。在区块链领域，根据Github的数据，常见的程序语言包括了C++，Java，JavaScript，Golang，Solidity等等。几乎每种语言都有各自的代表项目，比如：C++语言以比特币core客户端为代表；JavaScript以Lisk的侧链项目为代表；Java语言也和JS类似，二者都编程了较多的区块链项目，例如NEM、Lisk主链等等；Solidity作为最常用的智能合约编程语言，以ETH作为应用代表，并且几乎所有集成了EVM的智能合约平台都支持Solidity语言……当然，随着技术的更迭，一方面许多已有项目早已做到了多客户端多程序语言设计，例如Bitcoin除了以C++语言编程的Core客户端外，还有以Java语言编写的BitcoinJ；以太坊则有Python客户端，Golang客户端，Java客户端，Substrate客户端等等。另一方面，新兴的程序语言也在不断加入区块链世界中，例如相对严谨的Rust语言被用于Filecoin的编程中，受众广泛的Python语言也被各个项目所接纳。
对于WDC而言，目前主链采用了Java语言进行编程。Java语言拥有广泛的受众，在Github中，以Java语言作为基础的库数量超过83万，并有2000万次以上的相关代码提交，作为WDC主链的首选语言，Java不仅为WDC带来了丰富的工具库和众多可参考的开源项目，也为WDC技术社区未来的扩张规模描绘了详细的蓝图，WDC本身作为开源的区块链项目，在丰富Java语言应用实例的同时，也将吸引更多的Java程序员或爱好者参与到该项目中。当然，如前文所说，多客户端多程序语言设计已不再是难题，随着多客户端互操作系统的不断完善，“多客户端设计能有效避免单一错误“的共识业已达成。随着技术底蕴的不断积累，WDC也将在未来建立以其他语言为编程基础的全节点客户端，通过多客户端交互，提高整个主链的容错性。

三、经济模型
经济模型决定一个系统的可运行时间。从“点对点现金系统”角度出发，虽然Bitgold，B-money等早期项目已经注意到了经济模型的重要性，然而基于中心化信任的经济模型最终没能让它们度过“信任”的难关。从比特币开始，将代币上限硬编码到代码中，并通过工作量证明机制为铸币提供途径，让系统在短期内通胀而长期看通缩的经济机制至今仍是主流，但长期通缩的系统，一方面给予了部分资金短期炒作的空间，另一方面可能会在未来面临流动性问题（尤其是矿工无法通过挖掘新区块获利，仅能从交易手续费中获得收益的时候），对此，大约在2014年，从PPC开始探讨权益证明机制以及符合其机制的经济模型，目前对于权益证明而言，最具代表性的是EOS的DPoS和超级节点经济模型，通过质押与民主投票，投票出30个超级节点进行出块，而系统将新发行代币来维持超级节点基本开销，权益证明的经济模型大部分是通胀的，网络需要不断新发货币来激励并补贴出块节点的成本，所以权益证明也因此饱受诟病，因其存在稀释价值的情况。
对于WDC而言，如前文所提，采用了混合证明共识，与此相对应的经济机制也不同于传统的权益证明或工作量证明之经济机制。对于出块节点而言，首先需要出块节点需要搭建符合配置的硬件设备，确保在规定的窗口期内能完成出块任务；之后质押至少10万WDC代币，并保持质押量排名位于前15名，方能获得出块机会。相对于工作量证明而言，通过质押行为将矿工利益与网络绑定，如果矿工作恶，将面临损失设备配置成本+质押金折损的双重损失；相对于权益证明而言，矿工需要付出算力成本方能出块，避免了传统权益证明区块产出成本低廉导致的无利害攻击与长程攻击的情况。通过预设的8800万WDC代币作为出块奖励，持续激励矿工维护网络稳定性。

四、智能合约模型
智能合约/脚本是区块链广义可拓展性最重要的组成部分。目前的合约模型广义上可区分为图灵完备的与图灵不完备的，当然，在比特币诞生的初期并没有完善“智能合约”概念，虽然Nick Szabo在更早之前便提出了智能合约的设想。比特币采用的是“脚本”概念，通过硬编码操作码的形式，为技术人员提供一定程度的操作范围，比特币的脚本是图灵不完备的，其无法完成合约的内部循环。之后，由以太坊作为开端，通过扩大比特币操作码的应用范围，提供一种图灵完备的操作语言，并赋予相应的状态虚拟机，这便是我们目前所熟知的“智能合约”。合约/脚本将区块链转化为了分布式计算机，但是既然是计算机，既然是人为赋予的操作规则，其必然存在不完美。智能合约将安全性问题由系统转移给了编程人员，所以我们近些年可以看到有各种基于智能合约的资产被盗，或许是因为合约程序编写有漏洞；或许是因为，执行合约代码的虚拟机出问题等原因，由于智能合约的灵活性，程序的功能设计边界极广，系统无法从机制上，从技术上彻底的杜绝有问题的合约程序部署到链上。区块链作为“去中心化的信任机器”，如果不能解决合约带来的信任问题，势必无法支撑价值互联网。
对此，WDC采用了不同于以太坊的设计——否定既往智能合约的理念，采用可阅读可识别的规则描述语句，通过规则而非合约程序约束事务执行范围。规则是一种静态的定义，不同于以太坊智能合约，规则只能由外部事务触发，无法内部触发，且为非图灵完备，以避免代码问题导致规则（合约）的不安全设计。目前，WDC设计了专门的规则语法，并定义了以下规则边界：资产定义、多重签名、条件支付、存证、抵押、投票。以上规则已硬编码进核心中，用户实际上只需要填充相应的属性值与规则中的动态值，即可通过模板引擎来实现自己的规则，即通过已提供的模板，实现更加安全的“智能合约”。

五、地址模型
对于区块链而言，地址即是你的身份证明，也是你与其他节点交互的通道。比特币的地址采用了SHA-256与RIPEMD160双哈希设计，并以Base58check编码，其生成公式遵循：地址=Base58check(RIPEMD160（SHA256(公钥)）)，除此之外，比特币还在地址中加入了校验码与版本前缀的设计，比特币地址的前缀方便了用户快速识别该地址类型，如传统的比特币地址前缀为1，而pay-to-script-hash address脚本哈希地址的前缀为3，这也是为何目前比特币地址多以3开头的原因（隔离见证需要）。以太坊中，地址生成的流程也是：私钥→公钥→地址。包含三个步骤：生成一个随机的私钥（32字节）→通过私钥生成公钥（64字节）→通过公钥得到地址（20字节），不同于比特币，在公钥推导地址过程中，以太坊将公钥进行hash，取公钥的Keccak-256哈希值后20位加上0x前缀即为地址，不需要生成校验码与特殊前缀。
WDC的地址模型遵照比特币的经典设计，参考了以太坊的公钥推导地址流程。基本步骤遵循私钥→公钥→地址的推导流程，包括以下几步：1、用户通过私钥或者生成Keystore。2、通过Keystore生成相应的公钥，并对公钥进行SHA3-256计算，再进行RIPEMD-160哈希，得到哈希值r1。3、在r1前面附加一个字节的版本号:0x01，得到结果r2。4、将r1进行两次SHA3-256计算，得到结果r3。5、获得r3的前面4个字节，称之为b4,将b4附加在r2的后面，得到结果r5。5、将r5进行base58编码，得到结果r6,r6即是地址。

六、挖矿/密码函数
数字货币的英文为Cryptocurrency，更准确的翻译应当为“加密货币”，侧面印证了密码学(Cryptography)对于加密货币的重要性。密码学在加密货币中的使用，除了常见的公私钥对生成以外，更多的用于挖矿当中。比特币采用SHA-256作为挖矿函数，矿工通过不断地消耗算力碰撞出符合系统难度要求地哈希值来竞争出块权力，不过虽然中本聪在白皮书中设想过1CPU=1票的想法，但由于SHA-256运算不需要占用过多系统内存，矿工出于利益不断迭代挖矿设备并出现了ASIC等专业矿机，导致了算力的大量集中。以太坊则采用了ethash，其前身为Dagger Hashimoto算法，作为一种内存困难函数，考虑到每台电脑只有一个总内存，将挖矿流程锁定在以内存为衡量标准的硬件性能上，通过将大量无用数据存入内存的方式，避免平行处理计算导致的挖矿中心化风险，降低硬件的运算优势，以此做到挖矿的相对去中心化。
当然，世界上不存在不被攻破的系统，挖矿函数亦是如此。曾今有人设想过，如果量子计算机开始量产，SHA-256或者ethash函数必定会被攻破或者被找到弱点，攻击者可以无限弱化区块链的历史权重并轻易的发起双花攻击甚至区块重组攻击。对此许多项目开始采用了抗量子算法，例如Double SHA-256算法等。WDC亦采用了针对量子攻击的挖矿算法，在WDC的挖矿过程中采用X8迭代哈希算法,在确保共识效率的同时，提供高抗分叉的能力，加上DPoS带来的利益绑定，强化矿工与主链之间的纽带。

七、交易模型
不恰当的交易模型势必会引起状态爆炸，导致节点无法承受储存压力。目前主流的交易模型有两种：UTXO模型与账户（Account）模型。UTXO模型以比特币为代表，在比特币中，交易只是代表了 UTXO 集合的变更，钱包里的比特币都是单独的UTXO，对于用户而言，想要了解其钱包内有多少比特币，需要整合所有的UTXO才行。UTXO类似我们现实中的现金交易，存在“找零”和“凑整”两种行为，这种模型有效确保了矿工不会储存超出极限UTXO数量的状态（话句话说，矿工最多只会储存2100万比特币的UTXO），每次交易都会消灭原有的UTXO并产生全新的UTXO，确保了状态池大小的稳定。账户模型以以太坊为代表，在以太坊中，每一个地址即是一个账户，每个账户都存在独立的状态，交易代表了账户状态的变更，对于用户而言，由于账户的状态一直都是更新的，其钱包的金额数量可以一目了然。账户模型类似于支付宝、微信钱包，每一次新的交易发起，都会更新交易方的账户状态，账户模型更加适合需要不断更新状态的智能合约平台，但是由于状态更新会留存在区块记录中，同时为了确保交易的完整性，矿工往往需要储存超过1个区块的交易状态，给予了矿工相当的储存压力，尤其是储存所有状态的完全节点矿工，这也是目前以太坊社区积极研究无状态客户端的原因。
在WDC中采用了和比特币类似的UTXO模型，但稍有不同，WDC赋予了每一个交易Payload空间，允许交易附带信息，以便完成各项规则的检验与事务的执行。相比于账户模型，UTXO模型经过了十年的稳定运行实践，其性能和安全性有目共睹。WDC的UTXO模型提供了基本的隐私性（只要用户为每笔交易使用新地址，就很难把它和其他账户关联起来），可扩展性（UTXO 模型是无状态的，可以同时处理多个UTXO实现并发处理），抗重放攻击（交易的 Input 始终是链接在某个 UTXO 后面，交易无法被重放），简单验证（计算在链外，节点只做验证）等特点。

八、多签
